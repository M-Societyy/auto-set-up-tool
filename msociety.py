# Discord Server Setup Bot - M-Society
# Antes de q digas q es IA por los comentarios en el script, lo comentamos por si alguien quiere hacer modificaciones.


import discord
from discord.ext import commands
import asyncio
from colorama import Fore, init, Style
import os
import json
import aiohttp

# Inicializar colorama
init()
os.system("title Discord Server Setup Bot - M-Society")
os.system("cls" if os.name == "nt" else "clear")

# Banner
banner = """
                         ‚ñà‚ñà‚ñà‚ñÑ ‚ñÑ‚ñà‚ñà‚ñà‚ñì  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñí‚ñà‚ñà‚ñà‚ñà‚ñà   ‚ñÑ‚ñà‚ñà‚ñà‚ñà‚ñÑ   ‚ñà‚ñà‚ñì‚ñì‚ñà‚ñà‚ñà‚ñà‚ñà‚ñÑ‚ñÑ‚ñÑ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñì‚ñì‚ñà‚ñà   ‚ñà‚ñà‚ñì
                        ‚ñì‚ñà‚ñà‚ñí‚ñÄ‚ñà‚ñÄ ‚ñà‚ñà‚ñí‚ñí‚ñà‚ñà    ‚ñí ‚ñí‚ñà‚ñà‚ñí  ‚ñà‚ñà‚ñí‚ñí‚ñà‚ñà‚ñÄ ‚ñÄ‚ñà  ‚ñì‚ñà‚ñà‚ñí‚ñì‚ñà   ‚ñÄ‚ñì  ‚ñà‚ñà‚ñí ‚ñì‚ñí ‚ñí‚ñà‚ñà  ‚ñà‚ñà‚ñí
                        ‚ñì‚ñà‚ñà    ‚ñì‚ñà‚ñà‚ñë‚ñë ‚ñì‚ñà‚ñà‚ñÑ   ‚ñí‚ñà‚ñà‚ñë  ‚ñà‚ñà‚ñí‚ñí‚ñì‚ñà    ‚ñÑ ‚ñí‚ñà‚ñà‚ñí‚ñí‚ñà‚ñà‚ñà  ‚ñí ‚ñì‚ñà‚ñà‚ñë ‚ñí‚ñë  ‚ñí‚ñà‚ñà ‚ñà‚ñà‚ñë
                        ‚ñí‚ñà‚ñà    ‚ñí‚ñà‚ñà   ‚ñí   ‚ñà‚ñà‚ñí‚ñí‚ñà‚ñà   ‚ñà‚ñà‚ñë‚ñí‚ñì‚ñì‚ñÑ ‚ñÑ‚ñà‚ñà‚ñí‚ñë‚ñà‚ñà‚ñë‚ñí‚ñì‚ñà  ‚ñÑ‚ñë ‚ñì‚ñà‚ñà‚ñì ‚ñë   ‚ñë ‚ñê‚ñà‚ñà‚ñì‚ñë
                        ‚ñí‚ñà‚ñà‚ñí   ‚ñë‚ñà‚ñà‚ñí‚ñí‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñí‚ñí‚ñë ‚ñà‚ñà‚ñà‚ñà‚ñì‚ñí‚ñë‚ñí ‚ñì‚ñà‚ñà‚ñà‚ñÄ ‚ñë‚ñë‚ñà‚ñà‚ñë‚ñë‚ñí‚ñà‚ñà‚ñà‚ñà‚ñí ‚ñí‚ñà‚ñà‚ñí ‚ñë   ‚ñë ‚ñà‚ñà‚ñí‚ñì‚ñë
                        ‚ñë ‚ñí‚ñë   ‚ñë  ‚ñë‚ñí ‚ñí‚ñì‚ñí ‚ñí ‚ñë‚ñë ‚ñí‚ñë‚ñí‚ñë‚ñí‚ñë ‚ñë ‚ñë‚ñí ‚ñí  ‚ñë‚ñë‚ñì  ‚ñë‚ñë ‚ñí‚ñë ‚ñë ‚ñí ‚ñë‚ñë      ‚ñà‚ñà‚ñí‚ñí‚ñí 
                        ‚ñë  ‚ñë      ‚ñë‚ñë ‚ñë‚ñí  ‚ñë ‚ñë  ‚ñë ‚ñí ‚ñí‚ñë   ‚ñë  ‚ñí    ‚ñí ‚ñë ‚ñë ‚ñë  ‚ñë   ‚ñë     ‚ñì‚ñà‚ñà ‚ñë‚ñí‚ñë 
                        ‚ñë      ‚ñë   ‚ñë  ‚ñë  ‚ñë  ‚ñë ‚ñë ‚ñë ‚ñí  ‚ñë         ‚ñí ‚ñë   ‚ñë    ‚ñë       ‚ñí ‚ñí ‚ñë‚ñë  
                        ‚ñë         ‚ñë      ‚ñë ‚ñë  ‚ñë ‚ñë       ‚ñë     ‚ñë  ‚ñë         ‚ñë ‚ñë      
                                              ‚ñë                            ‚ñë ‚ñë     
"""

def show_gradient_banner():
    start_color = (255, 0, 0)    
    end_color = (128, 0, 255)    
    
    def generate_gradient(start, end, steps):
        gradient = []
        for i in range(steps):
            r = int(start[0] + (end[0] - start[0]) * i / steps)
            g = int(start[1] + (end[1] - start[1]) * i / steps)
            b = int(start[2] + (end[2] - start[2]) * i / steps)
            gradient.append((r, g, b))
        return gradient
    
    gradient = generate_gradient(start_color, end_color, len(banner))
    for i, char in enumerate(banner):
        r, g, b = gradient[i]
        print(f"\033[38;2;{r};{g};{b}m{char}", end="")
    print("\033[0m")

show_gradient_banner()


# Configuraci√≥n inicial
def get_input(prompt):
    print(f"{Fore.WHITE}[{Fore.CYAN}?{Fore.WHITE}] {prompt}")
    return input(f"{Fore.WHITE}‚Üí {Fore.CYAN}")

# Configuraci√≥n Turbo
async def turbo_setup():
    print(f"\n{Fore.WHITE}[{Fore.MAGENTA}‚ö°{Fore.WHITE}] {Fore.YELLOW}Modo Turbo Setup Activado{Style.RESET_ALL}")
    print(f"{Fore.WHITE}[{Fore.CYAN}i{Fore.WHITE}] Responde 3 preguntas clave para configuraci√≥n autom√°tica\n")
    
    server_type = get_input(f"Tipo de servidor {Fore.WHITE}[{Fore.CYAN}1{Fore.WHITE}] Gaming {Fore.WHITE}[{Fore.CYAN}2{Fore.WHITE}] Empresa {Fore.WHITE}[{Fore.CYAN}3{Fore.WHITE}] Comunidad")
    security_level = get_input(f"Nivel de seguridad {Fore.WHITE}[{Fore.CYAN}1{Fore.WHITE}] B√°sico {Fore.WHITE}[{Fore.CYAN}2{Fore.WHITE}] Medio {Fore.WHITE}[{Fore.CYAN}3{Fore.WHITE}] Alto")
    main_color = get_input(f"Color principal {Fore.WHITE}({Fore.RED}rojo{Fore.WHITE}/{Fore.BLUE}azul{Fore.WHITE}/{Fore.GREEN}verde{Fore.WHITE}/{Fore.MAGENTA}morado{Fore.WHITE})")
    
    return {
        "server_type": server_type,
        "security_level": security_level,
        "main_color": main_color.lower()
    }

# Plantillas de configuraci√≥n
TEMPLATES = {
    "gaming": {
        "estructura": {
            "üéÆ„ÉªGAMING": ["üì¢„Éªanuncios", "üí¨„Éªgeneral", "üéÆ„Éªjuegos", "üì∏„Éªclips"],
            "üì¢„ÉªCOMUNIDAD": ["üí¨„Éªcharla", "üé≠„Éªmemes", "üé®„Éªcreaciones"],
            "üîä„ÉªVOZ": ["üé§„Éªgeneral", "üé∂„Éªkaraoke", "üéÆ„Éªjuegos"]
        },
        "roles": {
            "üëë„ÉªDue√±o": {"color": "red", "perms": "admin"},
            "‚ö°„ÉªModerador": {"color": "blue", "perms": "mod"},
            "üéÆ„ÉªGamer": {"color": "green", "perms": "basic"}
        }
    },
    "empresa": {
        "estructura": {
            "üìå„ÉªINFORMACI√ìN": ["üì¢„Éªanuncios", "üìÖ„Éªeventos", "üè¢„Éªnormativas"],
            "üíº„ÉªDEPARTAMENTOS": ["üìä„Éªventas", "üñ•Ô∏è„ÉªTI", "üì¶„Éªlog√≠stica"],
            "ü§ù„ÉªCOMUNICACI√ìN": ["üí¨„Éªgeneral", "üì©„Éªsugerencias"]
        },
        "roles": {
            "üëî„ÉªDirector": {"color": "dark_red", "perms": "admin"},
            "üñãÔ∏è„ÉªGerente": {"color": "dark_blue", "perms": "mod"},
            "üë®‚Äçüíº„ÉªEmpleado": {"color": "dark_grey", "perms": "basic"}
        }
    }
}

COLOR_MAP = {
    "red": discord.Colour.red(),
    "blue": discord.Colour.blue(),
    "green": discord.Colour.green(),
    "morado": discord.Colour.purple(),
    "dark_red": discord.Colour.dark_red(),
    "dark_blue": discord.Colour.dark_blue(),
    "dark_grey": discord.Colour.dark_grey()
}

PERM_PRESETS = {
    "admin": discord.Permissions.all(),
    "mod": discord.Permissions(
        kick_members=True,
        ban_members=True,
        manage_channels=True,
        manage_messages=True,
        moderate_members=True
    ),
    "basic": discord.Permissions(
        read_messages=True,
        send_messages=True,
        connect=True,
        speak=True
    )
}

# Configuraci√≥n del bot
intents = discord.Intents.default()
intents.guilds = True
intents.guild_messages = True
intents.message_content = True

bot = commands.Bot(command_prefix="!", intents=intents)

@bot.event
async def on_ready():
    print(f"\n{Fore.WHITE}[{Fore.GREEN}+{Fore.WHITE}] Conectado como {Fore.YELLOW}{bot.user}")
    
    # Men√∫ principal
    print(f"{Fore.CYAN}‚ïë {Fore.WHITE}[{Fore.CYAN}1{Fore.WHITE}] Configuraci√≥n Turbo (3 pasos)")                                                          
    print(f"{Fore.CYAN}‚ïë {Fore.WHITE}[{Fore.CYAN}2{Fore.WHITE}] Configuraci√≥n Avanzada Manual")                                                          
    print(f"{Fore.CYAN}‚ïë {Fore.WHITE}[{Fore.CYAN}3{Fore.WHITE}] Configurar Webhooks (Redes Sociales)")
    print(f"{Fore.CYAN}‚ïë {Fore.WHITE}[{Fore.CYAN}4{Fore.WHITE}] Personalizaci√≥n Avanzada de Roles  ") 

    
    option = get_input("Selecciona una opci√≥n")
    
    guild = bot.get_guild(guild_id)
    if not guild:
        print(f"{Fore.WHITE}[{Fore.RED}!{Fore.WHITE}] Servidor no encontrado")
        await bot.close()
        return
    
    if option == "1":
        config = await turbo_setup()
        await setup_turbo(guild, config)
    elif option == "2":
        await advanced_setup(guild)
    elif option == "3":
        await setup_webhooks(guild)
    elif option == "4":
        await role_customization(guild)
    
    await bot.close()

async def setup_turbo(guild, config):
    try:
        print(f"\n{Fore.WHITE}[{Fore.MAGENTA}‚ö°{Fore.WHITE}] Iniciando configuraci√≥n turbo...")
        
        # Eliminar canales existentes
        await delete_existing(guild)
        
        # Aplicar plantilla
        template = TEMPLATES["gaming" if config["server_type"] == "1" else "empresa" if config["server_type"] == "2" else "gaming"]
        
        # Crear estructura
        print(f"\n{Fore.WHITE}[{Fore.GREEN}+{Fore.WHITE}] Creando estructura turbo...")
        await create_structure(guild, template["estructura"], config["main_color"])
        
        # Crear roles
        print(f"\n{Fore.WHITE}[{Fore.BLUE}+{Fore.WHITE}] Configurando roles autom√°ticos...")
        await create_roles(guild, template["roles"])
        
        print(f"\n{Fore.WHITE}[{Fore.GREEN}‚úì{Fore.WHITE}] Configuraci√≥n turbo completada en {Fore.YELLOW}{len(guild.channels)} canales{Fore.WHITE} y {Fore.YELLOW}{len(guild.roles)} roles{Fore.WHITE}!")
        
    except Exception as e:
        print(f"\n{Fore.WHITE}[{Fore.RED}!{Fore.WHITE}] Error en turbo setup: {e}")

async def advanced_setup(guild):
    try:
        print(f"\n{Fore.WHITE}[{Fore.BLUE}*{Fore.WHITE}] Iniciando configuraci√≥n avanzada...")
        
        # Eliminar canales existentes
        await delete_existing(guild)
        
        # Configuraci√≥n personalizada
        estructura_personalizada = {}
        print(f"\n{Fore.WHITE}[{Fore.CYAN}i{Fore.WHITE}] Configuraci√≥n de categor√≠as (deja vac√≠o para terminar)")
        
        while True:
            nombre_categoria = get_input("Nombre de la categor√≠a")
            if not nombre_categoria:
                break
                
            canales = []
            print(f"{Fore.WHITE}[{Fore.CYAN}i{Fore.WHITE}] A√±ade canales para {Fore.YELLOW}{nombre_categoria}{Fore.WHITE} (deja vac√≠o para terminar)")
            while True:
                nombre_canal = get_input("Nombre del canal")
                if not nombre_canal:
                    break
                canales.append(nombre_canal)
            
            estructura_personalizada[nombre_categoria] = canales
        
        # Crear estructura personalizada
        await create_structure(guild, estructura_personalizada)
        
        print(f"\n{Fore.WHITE}[{Fore.GREEN}‚úì{Fore.WHITE}] Configuraci√≥n avanzada completada!")
        
    except Exception as e:
        print(f"\n{Fore.WHITE}[{Fore.RED}!{Fore.WHITE}] Error en configuraci√≥n avanzada: {e}")

async def setup_webhooks(guild):
    try:
        print(f"\n{Fore.WHITE}[{Fore.MAGENTA}üåê{Fore.WHITE}] Configurando webhooks para redes sociales...")
        
        # Crear categor√≠a si no existe
        categoria = discord.utils.get(guild.categories, name="üì°„ÉªREDES SOCIALES")
        if not categoria:
            categoria = await guild.create_category("üì°„ÉªREDES SOCIALES")
            print(f"{Fore.WHITE}  {Fore.GREEN}+{Fore.WHITE} Categor√≠a creada: üì°„ÉªREDES SOCIALES")
        
        # Twitter Webhook
        twitter_channel = await guild.create_text_channel("üê¶„Éªtwitter", category=categoria)
        webhook = await twitter_channel.create_webhook(name="Twitter Feed")
        print(f"{Fore.WHITE}  {Fore.BLUE}‚Ü≥{Fore.WHITE} Webhook Twitter creado: {webhook.url}")
        
        # YouTube Webhook
        yt_channel = await guild.create_text_channel("üì∫„Éªyoutube", category=categoria)
        webhook = await yt_channel.create_webhook(name="YouTube Feed")
        print(f"{Fore.WHITE}  {Fore.BLUE}‚Ü≥{Fore.WHITE} Webhook YouTube creado: {webhook.url}")
        
        print(f"\n{Fore.WHITE}[{Fore.GREEN}‚úì{Fore.WHITE}] Webhooks configurados correctamente!")
        print(f"{Fore.WHITE}[{Fore.CYAN}i{Fore.WHITE}] Configura estos webhooks en IFTTT o Zapier para automatizaci√≥n")
        
    except Exception as e:
        print(f"\n{Fore.WHITE}[{Fore.RED}!{Fore.WHITE}] Error configurando webhooks: {e}")

async def role_customization(guild):
    try:
        print(f"\n{Fore.WHITE}[{Fore.YELLOW}üëë{Fore.WHITE}] Personalizaci√≥n avanzada de roles")
        
        roles_config = {}
        print(f"{Fore.WHITE}[{Fore.CYAN}i{Fore.WHITE}] Configura los roles (deja vac√≠o el nombre para terminar)")
        
        while True:
            nombre_rol = get_input("Nombre del rol")
            if not nombre_rol:
                break
                
            color = get_input(f"Color para {nombre_rol} ({'/'.join(COLOR_MAP.keys())})")
            permisos = get_input(f"Tipo de permisos ({'/'.join(PERM_PRESETS.keys())})")
            
            roles_config[nombre_rol] = {
                "color": color,
                "perms": permisos
            }
        
        # Crear roles
        await create_roles(guild, roles_config)
        
        print(f"\n{Fore.WHITE}[{Fore.GREEN}‚úì{Fore.WHITE}] Roles personalizados creados exitosamente!")
        
    except Exception as e:
        print(f"\n{Fore.WHITE}[{Fore.RED}!{Fore.WHITE}] Error en personalizaci√≥n de roles: {e}")

async def delete_existing(guild):
    print(f"{Fore.WHITE}[{Fore.RED}-{Fore.WHITE}] Eliminando canales existentes...")
    for channel in guild.channels:
        try:
            await channel.delete()
            await asyncio.sleep(0.5)
        except:
            pass
            
    print(f"{Fore.WHITE}[{Fore.RED}-{Fore.WHITE}] Eliminando roles existentes...")
    for role in guild.roles:
        try:
            if role.name != "@everyone":
                await role.delete()
                await asyncio.sleep(0.5)
        except:
            pass

async def create_structure(guild, estructura, color_theme=None):
    for nombre_categoria, canales in estructura.items():
        try:
            # Aplicar estilo de color si hay tema
            if color_theme and color_theme in ["red", "blue", "green", "morado"]:
                nombre_categoria = nombre_categoria.replace("„Éª", f"„Éª{color_theme.upper()}„Éª")
                
            categoria = await guild.create_category(nombre_categoria)
            print(f"\n{Fore.WHITE}  {Fore.CYAN}‚â°{Fore.WHITE} Categor√≠a creada: {nombre_categoria}")
            
            for nombre_canal in canales:
                try:
                    if color_theme:
                        nombre_canal = nombre_canal.replace("„Éª", f"„Éª{color_theme[0].upper()}„Éª")
                    await guild.create_text_channel(nombre_canal, category=categoria)
                    print(f"{Fore.WHITE}    {Fore.GREEN}‚Ü≥{Fore.WHITE} Canal creado: {nombre_canal}")
                    await asyncio.sleep(0.5)
                except Exception as e:
                    print(f"{Fore.WHITE}    {Fore.RED}!{Fore.WHITE} Error al crear canal {nombre_canal}: {e}")
        except Exception as e:
            print(f"{Fore.WHITE}  {Fore.RED}!{Fore.WHITE} Error al crear categor√≠a {nombre_categoria}: {e}")

async def create_roles(guild, roles_config):
    for nombre_rol, config in roles_config.items():
        try:
            color = COLOR_MAP.get(config["color"], discord.Colour.default())
            permissions = PERM_PRESETS.get(config["perms"], discord.Permissions.none())
            
            await guild.create_role(
                name=nombre_rol,
                colour=color,
                permissions=permissions
            )
            print(f"{Fore.WHITE}  {Fore.GREEN}+{Fore.WHITE} Rol creado: {nombre_rol} ({config['color']})")
            await asyncio.sleep(0.5)
        except Exception as e:
            print(f"{Fore.WHITE}  {Fore.RED}!{Fore.WHITE} Error al crear rol {nombre_rol}: {e}")

# Iniciar bot
token = get_input("Token del bot")
guild_id = int(get_input("ID del servidor"))

bot.run(token)
